"      ___        ___          /__/\         /  /\         /  /\
"     /__/\      /  /\        |  |::\       /  /::\       /  /:/
"     \  \:\    /  /:/        |  |:|:\     /  /:/\:\     /  /:/ 
"      \  \:\  /__/::\      __|__|:|\:\   /  /:/~/:/    /  /:/  ___
"  ___  \__\:\ \__\/\:\__  /__/::::| \:\ /__/:/ /:/___ /__/:/  /  /\
" /__/\ |  |:|    \  \:\/\ \  \:\~~\__\/ \  \:\/:::::/ \  \:\ /  /:/
" \  \:\|  |:|     \__\::/  \  \:\        \  \::/~~~~   \  \:\  /:/
"  \  \:\__|:|     /__/:/    \  \:\        \  \:\        \  \:\/:/
"   \__\::::/      \__\/      \  \:\        \  \:\        \  \::/
"       ~~~~                   \__\/         \__\/         \__\/



" Note: prepend 'no' to switch an option off
" e.g.: set ruler != set noruler


"" plugin section
call plug#begin('~/.vim/plugged')		" start reading plugins		
Plug 'preservim/nerdtree'		        " directory browser
Plug 'itchyny/lightline.vim'    		" status line
Plug 'prabirshrestha/asyncomplete.vim'  " code completion support
Plug 'OmniSharp/omnisharp-vim'			" IDE like abilities for C#
Plug 'morhetz/gruvbox'                  " gruvbox colorscheme
call plug#end()							" stop reading plugins


" plugin options

" nerd tree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree())   "close vim if only window open is NERDTree
map <C-n> :NERDTreeToggle<CR>

" omnisharp
let g:Omnisharp_server_stdio = 1    " c# code completion server

" lightline
let g:lightline = {
      \ 'colorscheme': 'gruvbox',
\ }

" gruvbox
set background=dark
colorscheme gruvbox


"" default
unlet! skip_defaults_vim		" start default vim settings
source $VIMRUNTIME/defaults.vim
set nocompatible				" set compatibility to Vim only.
filetype plugin indent on		" enable filetype detection
filetype plugin on				" enable filetype plugins


"" general options

" misc
set history=1000				" remember a ton of commands
set clipboard+=unnamedplus		" use OS clipboard as default yank buffer
set spelllang=en,es,it			" enable spell-check in english, spanish, and italian
set backspace=indent,eol,start	" backspace over everything
set encoding=utf-8				" default encoding
set wildmenu					" display completion matches in a status line
set wildmode=list:longest,full  " filename completion
set nrformats-=octal			" don’t recognize numbers starting with zero as octal
set path+=**					" recursively look through subdirectories when dealing with filepaths
set showcmd						" show command keys
set splitbelow splitright		" better split behaviour
set autochdir					" switch to files local directory
set ttyfast						" enable fast terminal connecction


" UI
set ruler				" always show current position
syntax on				" turn on syntax highlighting.
set number				" show line numbers
if has('mouse')
	set mouse=a			" enable using the mouse if available
endif
set scrolloff=3			" keep a few lines of contect arround the cursor
set noshowmode			" don’t show currenet mode
set laststatus=2		" always display the statusline in all windows
set showtabline=2		" always display the tabline, even if there is only one tab
set t_Co=256			" set tabline color to white
set display=truncate	" show @@@ in the last line if it’s truncated
set linebreak           " wrap/cut the line only on whitespace
set showmatch			" show matching braces when over one
set cursorline			" underlines the line where the cursor is positioned


" whitespace and indentation
set tabstop=4					" a tab is four spaces
set listchars=tab:>-,trail:-	" display tabs with pretty colors
set shiftwidth=4				" N spaces while auto-indenting
set autoindent					" allways set auto-indenting on
set softtabstop=4				" N spaces while editing (deletes groups of N spaces)
set smartindent					" seems to do a decent job with indenting
set expandtab					" use spaces to insert a tab


" searching
set ignorecase		" ignore case when searching
set incsearch		" show partial matches for a search
set hlsearch		" highlight all matching phrases
set smartcase		" overwrite ignorecase when search pattern contains upper case characteres
set gdefault        "s///g is implied, explicitly adding g negates effect


"" mappings

" leader key
let mapleader=','
nnoremap <leader>, :let @/=''<CR>:noh<CR>|      " clear search

" html template
nnoremap <leader>html :-1read $HOME/.vim/templates/skeleton.html<CR>Gdd4kwf>a

" c# template
nnoremap <leader>cs :-1read $HOME/.vim/templates/skeleton.cs<CR>Gdd2kO

" bash template
nnoremap <leader>sh :-1read $HOME/.vim/templates/skeleton.sh<CR>o<Del>

" remove arrow keys and hjkl
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
noremap <Up> <Nop>
"noremap j <Nop>
noremap h <Nop>
noremap l <Nop>
"noremap k <Nop>

set whichwrap=b,s,<,>,[,]		" allow <Left>, <Right>, <Backspace>, and <Space>, to move the cursor from the start of a line to the begining of the other and viceversa

" cut - copy - paste with ctrl-x crtl-c ctrl-v
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <C-r><C-o>

" since I constantly write accidentally mess these up when going fast
command WQ wq
command Wq wq
command W w
command Q q

" w!! to write with sudo even if not opened with sudo
cmap w!! w !sudo tee >/dev/null %

" when searching, after pressing enter, press Ctrl to ignore special characters like accent/diacritics
cnoremap <CR> <C-\>e getcmdtype() =~ '[?/]' ? substitute(getcmdline(), '\a', '[[=\0=]]', 'g'): getcmdline()<CR><CR>

" auto-closing { [ (
inoremap ( ()<Left>
inoremap (<CR> (<CR>)<C-c>O<Tab>
inoremap [ []<Left>
inoremap [<CR> [<CR>]<C-c>O<Tab>
inoremap { {}<Left>
inoremap {<CR> {<CR>}<C-c>O<Tab>

