#!/bin/sh

# Recolorize
# A wrapper for paintee

# If you have a script to change the color of an app based on either
# .Xresources or ~/.cache/paintee, call it inside this function
update_apps() {
  # Bspwm
  "${XDG_CONFIG_HOME:-$HOME/.config}/bspwm/config/color_setup.sh" &

  # Polybar
  "${XDG_CONFIG_HOME:-$HOME/.config}/polybar/launch.sh" &

  if [ -n "$quickstart" ]; then
    return
  fi

  # Eww
  "${XDG_CONFIG_HOME:-$HOME/.config}/eww/colorize_eww.sh" &

  # Kitty
  "${XDG_CONFIG_HOME:-$HOME/.config}/kitty/colorize_kitty.sh" &

  # Zathura
  "${XDG_CONFIG_HOME:-$HOME/.config}/zathura/genzathurarc.sh" &
}

usage() {
  echo "Usage: $(basename "$0") [options] [color]"
  echo "Options:"
  echo "  -h, --help: Print this help"
  echo "  -c, --current: Print the current color"
  echo "  -q, --quickstart: Skip updating some apps"
  echo "  -x, --xresources: Use xresources instead of ~/.cache/paintee"
  echo "  -p, --path: Set the path to the color file"
  echo "  -l, --list: List all available colors"
  exit "$1"
}

msg() {
  echo "$(basename "$0") - $1"
}

update_colors() {
  xrdb "${xresources_path}"
  [ "${xresources_path}" != "${color_path}/${color_basename}" ] \
    && xrdb -merge "${color_path}/${color_basename}"
}

cache_colors() {
  paintee
  echo "
Current color scheme: '${color_path}/${color_basename}'
Current Xresources file: '${xresources_path}'
Updated: $(date)" >> "${cache_file}"
}

set_xresources_path() {
  [ ! -f "$1" ] && msg "$1 is not a file" && exit 2
  xresources_path=$1
}

set_color_path() {
  [ ! -d "$1" ] && msg "$1 is not a directory" && exit 2
  color_path=$1
}

get_colorscheme() {
  current_colorscheme=$(grep "color scheme" "${cache_file}")
  current_colorscheme="${current_colorscheme##*/}"
  echo "${current_colorscheme%?}"
}

set_color_basename() {
  [ -n "$1" ] \
    && [ ! -f "${color_path}"/"$1" ] \
    && msg "${color_path}/$1 does not exist" \
    && exit 2

  color_basename=${1:-$(basename "$(shuf -n1 -e "${color_path}"/*)")}
}

main() {
  cache_file="${HOME}/.cache/paintee"

  # parse options with a case switch
  while [ "$1" != "" ]; do
    case $1 in
      -h | --help)
        usage 0
        ;;
      -c | --current)
        get_colorscheme && exit 0
        ;;
      -q | --quickstart)
        quickstart=1
        ;;
      -x | --xresources)
        set_xresources_path "$2"
        shift
        ;;
      -p | --path)
        set_color_path "$2"
        shift
        ;;
      -l | --list)
        list=1
        ;;
      --* | -*)
        msg "Unrecognized option: $1"
        usage 22
        ;;
      *)
        if [ -z "${color}" ]; then
          color="$1"
        else
          msg "Multiple colors specified" && usage 7
        fi
        ;;
    esac
    shift
  done

  # Default colorsâ€™ path
  [ -z "${color_path}" ] && set_color_path "${XDG_CONFIG_HOME}/colorschemes"

  # list all available colors if requested
  if [ -n "${list}" ]; then
    for c in "${color_path}"/*; do
      basename "${c}"
    done
    exit 0
  fi

  set_color_basename "${color}"

  [ -z "${xresources_path}" ] \
    && set_xresources_path "${color_path}/${color_basename}"

  update_colors
  cache_colors &
  update_apps

  # This script might fail, loop, or provoque inconsistent states, if called a #
  # second time right after the first one finished. To avoid this, uncomment   #
  # the line bellow, at the cost of efficiency.                                #
  # If you chose to leave it commented out and the script fails in any way,    #
  # just kill it with Ctrl-c and re execute.                                   #

  # wait
}

main "$@"
