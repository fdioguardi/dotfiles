#!/bin/bash

# Recolorize
# A wrapper for paintee


# If you have a script to change the color of an app
# based on either .Xresources or ~/.cache/paintee
# call it inside this function
function update_apps
{
	# Bspwm
	"$HOME"/.config/bspwm/config/color_setup.sh

    # Alacritty
    "$HOME"/.config/alacritty/colorize_alacritty.sh
}


function usage
{
	echo -e "Usage: $( basename "$0" ) [-c PATH] [-x PATH] FILE..." >&2
}

function update_colors
{
    xrdb "$xresources_path"
    xrdb -merge "$color_path/$color_basename"   # May be redundant
}

function cache_colors
{
    paintee
    echo -e "
    Current color scheme: '$color_path/$color_basename'
    Current Xresources file: '$xresources_path'
    Updated: $(date)" >> "$cache_file"
}

function set_xresources_path
{
    [ ! -f "$1" ] && echo "$1 is not a file" && exit 3
    xresources_path=$1
}

function set_color_path
{
    [ ! -d "$1" ] && echo "$1 is not a directory" && exit 3
    color_path=$1
}

cache_file="$HOME/.cache/paintee"

while getopts 'arc:x:' opt; do
	case "$opt" in
		a)	grep "color scheme" "$cache_file" | cut -f6 -d"/" | tr -d "'" ; exit 0	;;
		r)	;; #Placebo effect
		c)	set_color_path "$OPTARG"		;;
		x)	set_xresources_path "$OPTARG"	;;
		?)	usage ; exit 2			;;
	esac
done
shift "$((OPTIND - 1))"

# Default colorsâ€™ path
[ -z "$color_path" ] && set_color_path "$HOME/.colors"

[ $# -gt 1 ] && usage && exit 1

if [ $# -eq 1 ]; then
	[ ! -f "$color_path"/"$1" ] && echo "$color_path/$1 does not exist" && exit 3 || color_basename=$1
fi

: "${color_basename:=$(basename "$(shuf -n1 -e "$color_path"/*)")}"

[ -z "$xresources_path" ] && set_xresources_path "$color_path/$color_basename"

update_colors
cache_colors
update_apps
